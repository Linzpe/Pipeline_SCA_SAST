pipeline {
    agent {
        docker {
            image 'docker:19.03.12' // Usar una imagen de Docker con Docker preinstalado
            args '-v /var/run/docker.sock:/var/run/docker.sock' // Montar el socket de Docker para acceder al demonio de Docker
        }
    }

    environment {
        // Variables que se usan repetidas veces a lo largo del código. Son como variables de entorno.
        DOCKER_REGISTRY = '192.168.49.2:31617'
        API_IMAGE = 'my-api:latest'
        DB_IMAGE = 'my-db:latest'
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/Linzpe/Pipeline_SCA_SAST.git'
            }
        }

        stage('Build') {
            steps {
                script {
                    sh '''
                    docker build -t $DOCKER_REGISTRY/$API_IMAGE -f Dockerfile.API .
                    docker build -t $DOCKER_REGISTRY/$DB_IMAGE -f Dockerfile.db .
                    '''
                }
            }
            post {
                // En caso de que falle la etapa "build" se para el pipeline y se "postea" un failure
                failure {
                    echo 'Error en el stage Build. Se detiene el pipeline'
                    error('Build failed') 
                }
            }
        }

        stage('Test') {
            steps {
                script {
                    // Ejecutar los tests dentro del contenedor de la API
                    docker.image("$DOCKER_REGISTRY/$API_IMAGE").inside {  // Esta es una manera de abrir un contenedor para ejecutar comandos temporalmente
                        sh '''
                            // Test de funcionamiento del código de la API
                            pip install pytest
                            pytest test.py
                        '''
                    }
                }
            }
        }

        stage('SAST') {
            steps {
                script {
                    // Se realiza el análisis de código estático de la API (SAST) con Bandit
                    docker.image("$DOCKER_REGISTRY/$API_IMAGE").inside {
                        sh '''
                            pip install bandit
                            bandit -r . -f json -o bandit_report.json'
                        '''
                    }
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'bandit_report.json', allowEmptyArchive: true
                }
            }
        }

        stage('Bandit_report análisis') {
            steps {
                sh '''
                    apt-get update && apt-get install -y jq
                    highs=$(jq '[.results[] | select(.issue_severity == "HIGH")] | length' bandit_report.json)
                    mediums=$(jq '[.results[] | select(.issue_severity == "MEDIUM")] | length' bandit_report.json)
                    echo "Numero de HIGH VULNERABILITIES: $highs"
                    echo "\nNumero de MEDIUM VULNERABILITIES: $mediums"
                    if [ "$highs" > 3 ]; then
                        echo "Hay más de 3 vulnerabilidades HIGH. Fallando la build."
                        exit 1
                    fi
                '''
            }
        }

        stage('SCA') {
            steps {
                script {
                    docker.image("$DOCKER_REGISTRY/$API_IMAGE").inside {  // Volvemos a iniciar temporalmente el contenedor
                        sh '''
                            # Instalar Safety
                            pip install safety
                            # Ejecutar análisis con Safety y guardar el reporte
                            safety check -r requirements.txt --json > safety_report.json
                        '''
                    }
                }
            }
            post {
                always {
                    // Publicar el reporte de Safety como artefacto
                    archiveArtifacts artifacts: 'safety_report.json', allowEmptyArchive: true
                }
            }
        }

        stage('Push') {
            steps {
                script {
                    sh '''
                    docker push $DOCKER_REGISTRY/$API_IMAGE
                    docker push $DOCKER_REGISTRY/$DB_IMAGE
                    '''
                }
            }
        }

        stage('Pull-Deploy') {
            steps {
                script {
                    sh '''
                    kubectl set image deployment/api api=$DOCKER_REGISTRY/$API_IMAGE
                    kubectl set image deployment/db db=$DOCKER_REGISTRY/$DB_IMAGE
                    kubectl rollout status deployment/api
                    kubectl rollout status deployment/db
                    '''
                }
            }
        }

    
    }
}


