pipeline {
    // Definimos el agent PREDETERMINADO
    agent {
        label 'docker-agent'
    }

    environment {
        // Variables que se usan repetidas veces a lo largo del código. Son como variables de entorno.
        DOCKER_REGISTRY = 'basileusmegas'
        API_IMAGE = 'my-api:latest'
        DB_IMAGE = 'my-db:latest'
        DOCKERHUB_CREDENTIALS_ID = '999000999' // ID de las credenciales de docker-hub
    }

    stages {
        stage('Checkout') {
            steps {
                sh '''
                    apt-get update
                    apt-get install -y ca-certificates
                    git clone https://github.com/Linzpe/Pipeline_SCA_SAST.git
                '''
                // GUARDAMOS LOS ARCHIVOS CLONADOS: usamos stash, sirve para almacenar un conjunto de 
                // archivos que serán usados en otros stages ejecutados por agentes distintos
                stash includes: '**', name: 'repo'
            }
        }

        stage('Test') {
            agent {
                label 'python-agent'
            }
            steps {
                script {
                    container('python') {
                        unstash 'repo'
                        // Test de funcionamiento del código de la API
                        sh '''
                            pip install -r requirements.txt
                            pip install pytest
                            pytest test.py
                        '''
                    }
                }
            }
        }

        stage('TruffleHog Scan') {
            steps {
                script {
                    container('docker') {
                        sh '''
                        docker run --rm -v "$PWD:/pwd" trufflesecurity/trufflehog:latest github --repo https://github.com/Linzpe/Pipeline_SCA_SAST.git
                        '''
                    }
                }
            }
        }

        stage('Build') {
            steps {
                script {
                    container('docker') {
                        // UNTASH para que los archivos "stashed" se añadan al workspace actual
                        unstash 'repo'
                        sh '''
                            docker build -t $DOCKER_REGISTRY/$API_IMAGE -f Dockerfile.API .
                            docker build -t $DOCKER_REGISTRY/$DB_IMAGE -f Dockerfile.db .
                        '''
                    }
                }
            }
            post {
                // En caso de que falle la etapa "build" se para el pipeline y se "postea" un failure
                failure {
                    echo 'Error en el stage Build. Se detiene el pipeline'
                    error('Build failed') 
                }
            }
        }

        stage('SAST') {
            agent {
                label 'python-agent'
            }
            steps {
                script {
                    unstash 'repo'
                    container('python') {
                        sh '''
                            pip install bandit  
                            bandit -r . -f json -o bandit_report.json || true
                        '''
                    }
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'bandit_report.json', allowEmptyArchive: true
                    stash includes: 'bandit_report.json', name: 'bandit-report'
                }
            }
        }

        stage('Security Gate') {
            steps {
                unstash 'bandit-report'
                unstash 'repo'
                sh '''
                    ls -la
                    chmod +x Security_gate.sh
                    ./Security_gate.sh
                '''
            }
        }

        stage('SCA') {
            agent {
                label 'python-agent'
            }
            steps {
                script {
                    unstash 'repo'
                    container('python') {
                        sh '''
                            # Instalar Safety
                            pip install safety
                            # Ejecutar análisis con Safety y guardar el reporte
                            safety check -r requirements.txt --json > safety_report.json
                        '''
                    } 
                }
            }
            post {
                always {
                    // Publicar el reporte de Safety como artefacto
                    archiveArtifacts artifacts: 'safety_report.json', allowEmptyArchive: true
                }
            }
        }

        stage('Push') {
            steps {
                script {
                        container('docker') {
                            withCredentials([usernamePassword(credentialsId: env.DOCKERHUB_CREDENTIALS_ID, usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                                sh '''
                                    echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
                                    docker push $DOCKER_REGISTRY/$API_IMAGE
                                    docker push $DOCKER_REGISTRY/$DB_IMAGE
                                '''
                            }
                        }
                    }
                }
        }

        stage('Pull-Deploy') {
            steps {
                script {
                    container('docker') {
                        sh '''
                            docker pull $DOCKER_REGISTRY/$API_IMAGE
                            docker pull $DOCKER_REGISTRY/$DB_IMAGE
                            docker run -d $DOCKER_REGISTRY/$API_IMAGE
                            docker run -d $DOCKER_REGISTRY/$DB_IMAGE
                            docker images
                            docker ps
                        '''
                    }
                }
            }
        }
    }
}
