pipeline {
    agent any

    environment {
        // Variables que se usan repetidas veces a lo largo del c√≥digo. Son como variables de entorno.
        DOCKER_REGISTRY = '192.168.49.2:31617'
        API_IMAGE = 'my-api:latest'
        DB_IMAGE = 'my-db:latest'
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/Linzpe/Pipeline_SCA_SAST.git'
            }
        }

        stage('Build') {
            steps {
                script {
                    sh '''
                    docker build -t $DOCKER_REGISTRY/$API_IMAGE -f Dockerfile.API .
                    docker build -t $DOCKER_REGISTRY/$DB_IMAGE -f Dockerfile.db .
                    '''
                }
            }
            post {
                // En caso de que falle la etapa "build" se para el pipeline y se "postea" un failure
                failure {
                    echo 'Error en el stage Build. Se detiene el pipeline'
                    error('Build failed') 
                }
            }
        }

        stage('Test') {
            steps {
                script {
                    // Ejecutar los tests dentro del contenedor de la API
                    sh '''
                    kubectl exec $(kubectl get pod -l app=api -o jsonpath="{.items[0].metadata.name}") -- sh -c "
                        pip install pytest
                        pytest test.py
                    "
                    '''
                }
            }
        }

        stage('Push') {
            steps {
                script {
                    sh '''
                    docker push $DOCKER_REGISTRY/$API_IMAGE
                    docker push $DOCKER_REGISTRY/$DB_IMAGE
                    '''
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    sh '''
                    kubectl set image deployment/api api=$DOCKER_REGISTRY/$API_IMAGE
                    kubectl set image deployment/db db=$DOCKER_REGISTRY/$DB_IMAGE
                    kubectl rollout status deployment/api
                    kubectl rollout status deployment/db
                    '''
                }
            }
        }

        stage('Bandit Analysis') {
            steps {
                sh '''
                pip install bandit
                bandit -r .
                '''
            }
        }
    }

    post {
        always {
            // Publicar resultados de los tests si es necesario
            junit 'test-results/*.xml'
        }
        cleanup {
            // Limpieza opcional, por ejemplo eliminar los contenedores si se han creado persistentemente
            sh 'docker system prune -f'
        }
    }
}


